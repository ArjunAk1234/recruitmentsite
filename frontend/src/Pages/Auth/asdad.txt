import React, { useState, useEffect } from 'react';
import { Star, Clock, Trophy, User, MapPin, Play, Lock, CheckCircle, AlertCircle, XCircle, Target } from 'lucide-react';

const Signup = () => {
  const [roadmaps, setRoadmaps] = useState([]);
  const [selectedRoadmap, setSelectedRoadmap] = useState(null);
  const [currentUser, setCurrentUser] = useState('');
  const [loading, setLoading] = useState(false);
  const [showSubmissionModal, setShowSubmissionModal] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [submissionText, setSubmissionText] = useState('');
  const [submissionFile, setSubmissionFile] = useState(null);
  const [leaderboard, setLeaderboard] = useState([]);
  const [showLeaderboard, setShowLeaderboard] = useState(false);

  const API_BASE = '';

  useEffect(() => {
    fetchRoadmaps();
  }, []);

  const fetchRoadmaps = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/roadmaps`);
      const data = await response.json();
      if (data.success) {
        setRoadmaps(data.roadmaps);
      }
    } catch (error) {
      console.error('Error fetching roadmaps:', error);
    }
    setLoading(false);
  };

  const fetchRoadmapDetails = async (roadmapId) => {
    if (!currentUser) {
      alert('Please enter your user ID first');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/roadmap?user_id=${currentUser}&roadmap_id=${roadmapId}`);
      const data = await response.json();
      if (data.success) {
        setSelectedRoadmap(data.roadmap);
      }
    } catch (error) {
      console.error('Error fetching roadmap details:', error);
    }
    setLoading(false);
  };

  const fetchLeaderboard = async (roadmapId) => {
    try {
      const response = await fetch(`${API_BASE}/roadmap/event/leaderboard?roadmap_id=${roadmapId}`);
      const data = await response.json();
      if (data.success) {
        setLeaderboard(data.leaderboard);
        setShowLeaderboard(true);
      }
    } catch (error) {
      console.error('Error fetching leaderboard:', error);
    }
  };

  const submitEvent = async () => {
    if (!submissionText.trim() && !submissionFile) {
      alert('Please provide either text submission or upload a file');
      return;
    }

    const formData = new FormData();
    formData.append('roadmap_id', selectedRoadmap.id);
    formData.append('event_id', selectedEvent.id);
    formData.append('user_id', currentUser);
    formData.append('submission_text', submissionText);
    if (submissionFile) {
      formData.append('submission_file', submissionFile);
    }

    try {
      const response = await fetch(`${API_BASE}/roadmap/event/submit`, {
        method: 'POST',
        body: formData
      });
      const data = await response.json();
      if (data.success) {
        alert('Submission successful!');
        setShowSubmissionModal(false);
        setSubmissionText('');
        setSubmissionFile(null);
        fetchRoadmapDetails(selectedRoadmap.id);
      } else {
        alert(data.error || 'Submission failed');
      }
    } catch (error) {
      console.error('Error submitting:', error);
      alert('Submission failed');
    }
  };

  const getEventStatusIcon = (event) => {
    if (event.submission_status === 'approved') return <CheckCircle className="w-5 h-5 text-white" />;
    if (event.submission_status === 'pending') return <Clock className="w-5 h-5 text-white" />;
    if (event.submission_status === 'rejected') return <XCircle className="w-5 h-5 text-white" />;
    if (event.unlocked) return <Target className="w-5 h-5 text-white" />;
    return <Lock className="w-5 h-5 text-white" />;
  };

  const getEventColors = (event) => {
    if (event.submission_status === 'approved') return {
      bg: 'bg-gradient-to-br from-green-400 to-green-600',
      glow: 'shadow-green-400/50',
      ring: 'ring-green-300'
    };
    if (event.submission_status === 'pending') return {
      bg: 'bg-gradient-to-br from-yellow-400 to-orange-500',
      glow: 'shadow-yellow-400/50',
      ring: 'ring-yellow-300'
    };
    if (event.submission_status === 'rejected') return {
      bg: 'bg-gradient-to-br from-red-400 to-red-600',
      glow: 'shadow-red-400/50',
      ring: 'ring-red-300'
    };
    if (event.unlocked) return {
      bg: 'bg-gradient-to-br from-blue-400 to-purple-600',
      glow: 'shadow-blue-400/50',
      ring: 'ring-blue-300'
    };
    return {
      bg: 'bg-gradient-to-br from-gray-400 to-gray-600',
      glow: 'shadow-gray-400/30',
      ring: 'ring-gray-300'
    };
  };

  const formatTimeRemaining = (seconds) => {
    if (!seconds || seconds <= 0) return 'Overdue';
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      return `${days}d ${hours % 24}h`;
    }
    return `${hours}h ${minutes}m`;
  };

  // Generate Angry Birds style path positions
  const generateAngryBirdsPath = (eventCount) => {
    const positions = [];
    const padding = 8; // 8% padding from edges
    const usableWidth = 84; // 84% usable width
    const usableHeight = 70; // 70% usable height
    
    // Create a winding path that goes from bottom-left to top-right
    for (let i = 0; i < eventCount; i++) {
      const progress = i / Math.max(eventCount - 1, 1);
      
      // Base path from bottom-left to top-right with curves
      let x = padding + (usableWidth * progress);
      let y = 85 - (usableHeight * progress); // Start from bottom (85%) go to top (15%)
      
      // Add sine wave for natural curves
      const waveIntensity = 15;
      const waveFrequency = 2.5;
      const sineWave = Math.sin(progress * Math.PI * waveFrequency) * waveIntensity;
      
      // Add some randomness for more organic feel
      const randomOffset = (Math.sin(i * 2.3) * 8) + (Math.cos(i * 1.7) * 6);
      
      // Apply waves and offsets
      y += sineWave + (randomOffset * 0.3);
      x += randomOffset * 0.5;
      
      // Add some height variation for platforms
      if (i % 3 === 0 && i > 0) {
        y -= 5; // Create "platform" effect
      }
      
      // Ensure positions stay within bounds
      x = Math.max(padding, Math.min(92, x));
      y = Math.max(12, Math.min(88, y));
      
      positions.push({ x, y });
    }
    
    return positions;
  };

  // Create curved path between points
  const createCurvedPath = (positions) => {
    if (positions.length < 2) return '';
    
    let path = `M ${positions[0].x} ${positions[0].y}`;
    
    for (let i = 1; i < positions.length; i++) {
      const curr = positions[i];
      const prev = positions[i - 1];
      
      // Calculate control points for smooth curves
      const dx = curr.x - prev.x;
      const dy = curr.y - prev.y;
      
      const cp1x = prev.x + dx * 0.3;
      const cp1y = prev.y + dy * 0.1 - Math.abs(dx) * 0.1;
      const cp2x = curr.x - dx * 0.3;
      const cp2y = curr.y - dy * 0.1 - Math.abs(dx) * 0.1;
      
      path += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${curr.x} ${curr.y}`;
    }
    
    return path;
  };

  const EventNode = ({ event, position, index, isLast }) => {
    const isClickable = event.unlocked && event.can_submit;
    const colors = getEventColors(event);
    
    return (
      <div 
        className={`absolute transform -translate-x-1/2 -translate-y-1/2 transition-all duration-500 ${
          isClickable ? 'cursor-pointer hover:scale-125 hover:-translate-y-2' : 'cursor-default'
        }`}
        style={{ 
          left: `${position.x}%`, 
          top: `${position.y}%`,
          zIndex: 20 + index
        }}
        onClick={() => {
          if (isClickable) {
            setSelectedEvent(event);
            setShowSubmissionModal(true);
          }
        }}
      >
        {/* Glow effect */}
        <div className={`absolute inset-0 w-20 h-20 rounded-full ${colors.bg} opacity-30 blur-md scale-150 ${colors.glow}`}></div>
        
        {/* Main node */}
        <div className={`relative w-16 h-16 rounded-full ${colors.bg} ${colors.glow} shadow-2xl flex items-center justify-center ring-4 ring-white ${colors.ring} ring-opacity-50 transform transition-all duration-300`}>
          {getEventStatusIcon(event)}
          
          {/* Sparkle effects for completed events */}
          {event.submission_status === 'approved' && (
            <>
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-yellow-300 rounded-full animate-pulse"></div>
              <div className="absolute -bottom-1 -left-1 w-2 h-2 bg-yellow-400 rounded-full animate-pulse delay-300"></div>
            </>
          )}
        </div>
        
        {/* Event number badge */}
        <div className="absolute -top-3 -right-3 w-8 h-8 bg-white rounded-full border-3 border-yellow-400 flex items-center justify-center shadow-lg">
          <span className="text-xs font-bold text-gray-800">{event.event_order}</span>
        </div>
        
        {/* Points display */}
        {event.points_earned && (
          <div className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-yellow-400 to-yellow-500 text-yellow-900 px-3 py-1 rounded-full text-xs font-bold flex items-center gap-1 shadow-lg">
            <Star className="w-3 h-3" />
            {Math.round(event.points_earned)}
          </div>
        )}
        
        {/* Floating title on hover */}
        <div className="absolute -top-16 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white px-3 py-1 rounded-lg text-xs font-medium opacity-0 hover:opacity-100 transition-opacity duration-300 pointer-events-none whitespace-nowrap z-50">
          {event.title}
        </div>
      </div>
    );
  };

  if (!selectedRoadmap) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500 p-4">
        <div className="max-w-6xl mx-auto">
          <div className="bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl p-8 mb-6 border border-white/20">
            <h1 className="text-5xl font-bold text-center bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-6">
              🎯 Learning Adventures
            </h1>
            
            <div className="flex justify-center mb-8">
              <div className="flex items-center gap-3 bg-gradient-to-r from-gray-100 to-white rounded-2xl p-4 shadow-lg border border-gray-200">
                <User className="w-6 h-6 text-purple-600" />
                <input
                  type="text"
                  placeholder="Enter your User ID"
                  value={currentUser}
                  onChange={(e) => setCurrentUser(e.target.value)}
                  className="bg-transparent outline-none text-gray-800 placeholder-gray-500 text-lg font-medium"
                />
              </div>
            </div>

            {loading ? (
              <div className="text-center py-12">
                <div className="animate-spin rounded-full h-16 w-16 border-4 border-purple-500 border-t-transparent mx-auto"></div>
                <p className="mt-6 text-gray-600 text-lg">Loading adventures...</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {roadmaps.map((roadmap, index) => (
                  <div
                    key={roadmap.id}
                    onClick={() => fetchRoadmapDetails(roadmap.id)}
                    className={`bg-gradient-to-br ${
                      index % 3 === 0 ? 'from-purple-500 to-pink-500' :
                      index % 3 === 1 ? 'from-blue-500 to-purple-500' :
                      'from-pink-500 to-red-500'
                    } rounded-2xl p-6 text-white cursor-pointer transform transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:-translate-y-2 border-2 border-white/20`}
                  >
                    <h3 className="text-2xl font-bold mb-3">{roadmap.title}</h3>
                    <p className="text-white/90 mb-6 text-sm leading-relaxed">{roadmap.description}</p>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <MapPin className="w-5 h-5" />
                        <span className="font-medium">Start Journey</span>
                      </div>
                      <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <Play className="w-6 h-6" />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  const eventPositions = generateAngryBirdsPath(selectedRoadmap.events.length);
  const pathData = createCurvedPath(eventPositions);

  return (
    <div className="min-h-screen bg-gradient-to-br from-sky-300 via-blue-400 to-indigo-600 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        {/* Floating clouds */}
        <div className="absolute top-20 left-10 w-24 h-16 bg-white/30 rounded-full blur-sm animate-pulse"></div>
        <div className="absolute top-32 left-32 w-32 h-20 bg-white/20 rounded-full blur-sm animate-pulse delay-1000"></div>
        <div className="absolute top-16 right-20 w-28 h-18 bg-white/25 rounded-full blur-sm animate-pulse delay-500"></div>
        
        {/* Ground elements */}
        <div className="absolute bottom-0 left-0 w-full h-32 bg-gradient-to-t from-green-500/40 to-transparent"></div>
        <div className="absolute bottom-10 left-1/4 w-20 h-12 bg-green-600/50 rounded-full blur-sm"></div>
        <div className="absolute bottom-8 right-1/3 w-16 h-10 bg-green-700/40 rounded-full blur-sm"></div>
      </div>

      {/* Header */}
      <div className="absolute top-4 left-4 right-4 z-30">
        <div className="flex justify-between items-center bg-white/95 backdrop-blur-md rounded-3xl px-8 py-4 shadow-2xl border border-white/30">
          <button
            onClick={() => setSelectedRoadmap(null)}
            className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white px-6 py-3 rounded-2xl font-bold transition-all duration-300 transform hover:scale-105 shadow-lg"
          >
            ← Back
          </button>
          
          <div className="text-center">
            <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              {selectedRoadmap.title}
            </h1>
            <p className="text-gray-600 font-medium">{selectedRoadmap.sig_name}</p>
          </div>
          
          <button
            onClick={() => fetchLeaderboard(selectedRoadmap.id)}
            className="bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white px-6 py-3 rounded-2xl font-bold flex items-center gap-2 transition-all duration-300 transform hover:scale-105 shadow-lg"
          >
            <Trophy className="w-5 h-5" />
            Leaderboard
          </button>
        </div>
      </div>

      {/* Game Area */}
      <div className="absolute inset-0 pt-28">
        <div className="relative w-full h-full">
          {/* Curved path */}
          <svg className="absolute inset-0 w-full h-full pointer-events-none" style={{ zIndex: 5 }}>
            <defs>
              <linearGradient id="pathGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" style={{ stopColor: '#fbbf24', stopOpacity: 1 }} />
                <stop offset="50%" style={{ stopColor: '#f59e0b', stopOpacity: 1 }} />
                <stop offset="100%" style={{ stopColor: '#d97706', stopOpacity: 1 }} />
              </linearGradient>
              <filter id="pathGlow">
                <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                <feMerge> 
                  <feMergeNode in="coloredBlur"/>
                  <feMergeNode in="SourceGraphic"/> 
                </feMerge>
              </filter>
            </defs>
            
            {pathData && (
              <>
                {/* Glow effect */}
                <path
                  d={pathData}
                  stroke="url(#pathGradient)"
                  strokeWidth="12"
                  fill="none"
                  filter="url(#pathGlow)"
                  opacity="0.6"
                />
                {/* Main path */}
                <path
                  d={pathData}
                  stroke="url(#pathGradient)"
                  strokeWidth="8"
                  fill="none"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                {/* Animated dots along path */}
                <path
                  d={pathData}
                  stroke="#fff"
                  strokeWidth="2"
                  fill="none"
                  strokeDasharray="4,8"
                  strokeLinecap="round"
                  opacity="0.8"
                >
                  <animate
                    attributeName="stroke-dashoffset"
                    values="0;12"
                    dur="2s"
                    repeatCount="indefinite"
                  />
                </path>
              </>
            )}
          </svg>
          
          {/* Event nodes */}
          {selectedRoadmap.events.map((event, index) => (
            <EventNode
              key={event.id}
              event={event}
              position={eventPositions[index]}
              index={index}
              isLast={index === selectedRoadmap.events.length - 1}
            />
          ))}
        </div>
      </div>

      {/* Submission Modal */}
      {showSubmissionModal && selectedEvent && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white/95 backdrop-blur-md rounded-3xl p-8 max-w-2xl w-full max-h-[90vh] overflow-auto shadow-2xl border border-white/20">
            <div className="flex justify-between items-start mb-6">
              <div>
                <h2 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  {selectedEvent.title}
                </h2>
                <p className="text-gray-600 font-medium">Event #{selectedEvent.event_order}</p>
              </div>
              <button
                onClick={() => setShowSubmissionModal(false)}
                className="text-gray-500 hover:text-gray-700 text-3xl font-bold hover:scale-110 transition-all duration-300"
              >
                ×
              </button>
            </div>
            
            <div className="mb-6 p-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl border border-blue-200">
              <p className="text-gray-700 mb-4 leading-relaxed">{selectedEvent.description}</p>
              <div className="flex flex-wrap gap-4 text-sm">
                <span className="flex items-center gap-2 bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full font-medium">
                  <Star className="w-4 h-4" />
                  {selectedEvent.available_points} points
                </span>
                {selectedEvent.time_remaining && (
                  <span className="flex items-center gap-2 bg-blue-100 text-blue-800 px-3 py-1 rounded-full font-medium">
                    <Clock className="w-4 h-4" />
                    {formatTimeRemaining(selectedEvent.time_remaining)} left
                  </span>
                )}
                {selectedEvent.current_penalty > 0 && (
                  <span className="flex items-center gap-2 bg-red-100 text-red-800 px-3 py-1 rounded-full font-medium">
                    <AlertCircle className="w-4 h-4" />
                    {selectedEvent.current_penalty}% penalty
                  </span>
                )}
              </div>
            </div>

            <div className="space-y-6">
              <div>
                <label className="block text-sm font-bold text-gray-700 mb-3">
                  Submission Text
                </label>
                <textarea
                  value={submissionText}
                  onChange={(e) => setSubmissionText(e.target.value)}
                  className="w-full h-40 px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 resize-none"
                  placeholder="Describe your work, provide links, or explain your solution..."
                />
              </div>
              
              <div>
                <label className="block text-sm font-bold text-gray-700 mb-3">
                  Upload File (Optional)
                </label>
                <input
                  type="file"
                  onChange={(e) => setSubmissionFile(e.target.files[0])}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300"
                />
              </div>
            </div>
            
            <div className="flex gap-4 mt-8">
              <button
                onClick={submitEvent}
                className="flex-1 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white py-4 rounded-2xl font-bold transition-all duration-300 transform hover:scale-105 shadow-lg"
              >
                🚀 Submit Work
              </button>
              <button
                onClick={() => setShowSubmissionModal(false)}
                className="px-8 bg-gradient-to-r from-gray-300 to-gray-400 hover:from-gray-400 hover:to-gray-500 text-gray-700 py-4 rounded-2xl font-bold transition-all duration-300 transform hover:scale-105"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Leaderboard Modal */}
      {showLeaderboard && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white/95 backdrop-blur-md rounded-3xl p-8 max-w-2xl w-full max-h-[90vh] overflow-auto shadow-2xl border border-white/20">
            <div className="flex justify-between items-center mb-8">
              <h2 className="text-3xl font-bold bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text text-transparent flex items-center gap-3">
                <Trophy className="w-10 h-10 text-yellow-500" />
                Leaderboard
              </h2>
              <button
                onClick={() => setShowLeaderboard(false)}
                className="text-gray-500 hover:text-gray-700 text-3xl font-bold hover:scale-110 transition-all duration-300"
              >
                ×
              </button>
            </div>
            
            <div className="space-y-4">
              {leaderboard.map((entry, index) => (
                <div
                  key={entry.student_id}
                  className={`flex items-center justify-between p-6 rounded-2xl transition-all duration-300 hover:scale-102 ${
                    index === 0 ? 'bg-gradient-to-r from-yellow-100 to-yellow-200 border-3 border-yellow-400 shadow-yellow-400/30' :
                    index === 1 ? 'bg-gradient-to-r from-gray-100 to-gray-200 border-3 border-gray-400 shadow-gray-400/30' :
                    index === 2 ? 'bg-gradient-to-r from-orange-100 to-orange-200 border-3 border-orange-400 shadow-orange-400/30' :
                    'bg-gradient-to-r from-blue-50 to-blue-100 border-2 border-blue-200'
                  } shadow-lg`}
                >
                  <div className="flex items-center gap-4">
                    <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg shadow-lg ${
                      index === 0 ? 'bg-gradient-to-br from-yellow-400 to-yellow-600 text-white' :
                      index === 1 ? 'bg-gradient-to-br from-gray-400 to-gray-600 text-white' :
                      index === 2 ? 'bg-gradient-to-br from-orange-400 to-orange-600 text-white' :
                      'bg-gradient-to-br from-blue-400 to-blue-600 text-white'
                    }`}>
                      {entry.rank_position}
                    </div>
                    <div>
                      <p className="font-bold text-gray-800 text-lg">{entry.student_name}</p>
                      <p className="text-sm text-gray-600">ID: {entry.student_id}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-bold text-2xl text-gray-800">{entry.total_points}</p>
                    <p className="text-sm text-gray-600 font-medium">{entry.completed_events} events</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Signup;